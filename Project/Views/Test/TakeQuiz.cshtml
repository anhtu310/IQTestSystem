@model Project.Models.Test

@{
    ViewData["Title"] = "Take Quiz";
}

<div class="container mt-4">

    <div class="row">

        <!-- Cột trái: Danh sách câu hỏi + Submit + Timer -->
        <div class="col-md-3">
            <div class="card shadow-sm mb-3">
                <div class="card-header bg-warning text-dark">
                    Thời gian còn lại: <span id="timer">--:--</span>
                </div>
            </div>

            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    Danh sách câu hỏi
                </div>
                <div class="card-body" style="max-height: 500px; overflow-y: auto;">
                    <div id="question-list" class="d-flex flex-wrap gap-2 justify-content-start">
                        @foreach (var question in Model.Questions.Select((q, index) => new { q, index }))
                        {
                            <a href="javascript:void(0);"
                               id="question-btn-@question.index"
                               class="btn btn-outline-primary btn-sm"
                               style="width: 60px;"
                               onclick="showQuestion(@question.index)">
                                Câu @(@question.index + 1)
                            </a>
                        }
                    </div>

                    <button type="button" class="btn btn-success w-100 mt-3" onclick="openConfirm()">
                        Nộp bài
                    </button>
                </div>
            </div>
        </div>

        <!-- Cột phải: Hiển thị câu hỏi -->
        <div class="col-md-9">
            <form id="quiz-form" method="post" action="@Url.Action("SubmitQuiz", "Test")">
                <input type="hidden" name="testId" value="@Model.TestId" />

                <div id="question-container">
                    @foreach (var question in Model.Questions.Select((q, index) => new { q, index }))
                    {
                        <div class="question" id="question-@question.index"
                             style="display: @(question.index == 0 ? "block" : "none")">
                            <h5>Câu @(@question.index + 1): @question.q.QuestionText</h5>

                            <ul class="list-group mt-2">
                                @foreach (var answer in question.q.Answers)
                                {
                                    <li class="list-group-item">
                                        <input type="radio" name="answers[@question.q.QuestionId]" value="@answer.AnswerId" onchange="markAnswered(@question.index)">
                                        @answer.AnswerText
                                    </li>
                                }
                            </ul>

                            <div class="mt-3">
                                <button type="button" class="btn btn-secondary" onclick="prevQuestion(@question.index)">
                                    Previous
                                </button>
                                <button type="button" class="btn btn-primary" onclick="nextQuestion(@question.index)">
                                    Next
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Confirm Box -->
<div id="confirm-box" class="position-fixed top-50 start-50 translate-middle bg-white border rounded p-4 shadow" style="display: none; z-index: 1050; min-width: 300px;">
    <h5 class="mb-3">Xác nhận nộp bài?</h5>
    <div class="d-flex justify-content-end gap-2">
        <button class="btn btn-secondary" onclick="closeConfirm()">Hủy</button>
        <button class="btn btn-success" onclick="submitQuiz()">Xác nhận</button>
    </div>
</div>

<script>
    let currentQuestion = 0;
    const totalQuestions = @Model.Questions.Count();

    let timeLimitMinutes = @Model.TimeLimit;
    let totalSeconds = timeLimitMinutes * 60;
    const timerDisplay = document.getElementById('timer');

    let isQuizStarted = true; // Đang làm bài
    let isConfirmingLeave = false; // Đang mở confirm leave

    function updateTimer() {
        let minutes = Math.floor(totalSeconds / 60);
        let seconds = totalSeconds % 60;

        timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

        if (totalSeconds <= 0) {
            alert('Hết giờ! Bài sẽ được nộp tự động.');
            submitQuiz();
        } else {
            totalSeconds--;
        }
    }

    setInterval(updateTimer, 1000);

    // Chuyển câu hỏi
    function showQuestion(index) {
        document.getElementById(`question-${currentQuestion}`).style.display = "none";
        document.getElementById(`question-${index}`).style.display = "block";
        currentQuestion = index;
    }

    function nextQuestion(index) {
        if (index < totalQuestions - 1) showQuestion(index + 1);
    }

    function prevQuestion(index) {
        if (index > 0) showQuestion(index - 1);
    }

    // Đánh dấu đã chọn
    function markAnswered(index) {
        const btn = document.getElementById(`question-btn-${index}`);
        btn.classList.remove('btn-outline-primary');
        btn.classList.add('btn-primary');
    }

    // Mở modal confirm nộp bài
    function openConfirm() {
        document.getElementById('confirm-box').style.display = 'block';
    }

    // Đóng modal confirm
    function closeConfirm() {
        document.getElementById('confirm-box').style.display = 'none';
    }

    // Nộp bài
    function submitQuiz() {
        isQuizStarted = false;
        document.getElementById('quiz-form').submit();
    }
</script>

